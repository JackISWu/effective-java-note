1. Consider static factory methods insteads of Constructers
Advantages: 
1 -  nulike constructers, they have names (readbility)
     when wanna create multiple instance creation function with a given signature, create multi constructor with same signature in different orders would make clients confused. But with static factory methods, you can create function with different meaningful names for them. 
2 - unlike constructers, they are not required to create a new object each time they're invoked (similar to Flyweight pattern)(improve performance)
     improve performance, if equivalent objects are requested ofen, especially if they are expensive to create.
     it allows an immutable class to make the guarantee that: a.equals(b) if and only if a == b. 
3 - unlike constructers, they can return an object of any subtype of their return type (flexibility)
     one sample is java.util.Collections
     The class of the returned object can also vary from release to release for enhanced software maintainability and performance.
4 - reduce the verbosity of creating parametrized type instances
     constructor: Map<String, List<String>> m = new HashMap<>(); -> java 8 now is OKey for this. So this is not yet a problem.
Disadvantage:
1 - classes without public or protected constructors cannot be subclassed
2 - they are not readily distinguishable from other static methods 
     you can reduce this disadvantage by drawing attention to static factories in class or interface comments, and by adhering to common naming conventions.
     common names for static factory methods: valueOf, of, getInstance, newInstance, getType, newType.

2. Consider a builder when faced with many constructor parameters
 - static factories and constructors share a limitation: they do not share well to large numbers of optional parameters. 
   -> telescoping constructor pattern
   -> JavaBeans pattern: call a parameterless constructor to create the object and then call setter methods to set parameter
 - but telescoping constructor pattern is hard to write client code when there are many parameters, and harder still to read it. \
   -> confuse clients & easy to reverse two params accidentlly
 - JavaBeans has serious disadvantage of its own:
   -> construction is split across multiple calls, a JavaBean may be in an inconsistent state partway through its construction.
   -> JavaBeans pattern precludes the possibility of making a class immutable, which requires added effort on ensuring thread safety.
 - Builder pattern
   -> the builder is a static member class of the class it builds
   -> good choice when designing classes whose constructors or static factories would have more than a handful of parameters.
// Builder Pattern
public class NutritionFacts {
     private final int servingSize;
     private final int servings;
     private final int calories;
     private final int fat;
     private final int sodium;
     private final int carbohydrate;
     public static class Builder {
          // Required parameters
          private final int servingSize;
          private final int servings;
          // Optional parameters - initialized to default values
          private int calories = 0;
          private int fat = 0;
          private int carbohydrate = 0;
          private int sodium = 0;

          public Builder(int servingSize, int servings) {
               this.servingSize = servingSize;
               this.servings = servings;
          }
          public Builder calories(int val){ 
               calories = val;
               return this;
           public Builder fat(int val){ 
               fat = val;
               return this;
          }
          public Builder carbohydrate(int val){ 
               carbohydrate = val; 
               return this;
          }
          public Builder sodium(int val){ 
               sodium = val;
               return this;
          }
          public NutritionFacts build() {
               return new NutritionFacts(this);
          }
     }
     private NutritionFacts(Builder builder) {
          servingSize = builder.servingSize;
          servings = builder.servings;
          calories = builder.calories;
          fat = builder.fat;
          sodium = builder.sodium;
          carbohydrate = builder.carbohydrate;
     }
}
NutritionFacts cocaCola = new NutritionFacts.Builder((240, 8).calories(100).sodium(35).carbohydrate(27).build();


3. Enforce the singleton property with a private constructor or an enum type:
//Singleton with public final field
public class Elvis {
  public static final Elvis INSTANCE = new Elvis();
  private Elvis(){...}
  
  public void leaveTheBuilding(){...}
} //-> advantage: the declarations make it clear that the class is a singleton

//Singleton with static factory
public class Elvis {
  private static final Elvis INSTANCE = new Elvis();
  private Elvis(){...}
  public static Elvis getInstance(){...}
  
  public void leaveTheBuilding(){...}
} //-> advantage: it's flexible to change your mind about whether the class should be a singleton without chaning its API

//Enum Singleton - the preferred appproach
public enum Elvis {
  INSTANCE;
  
  public void leaveTheBuilding(){...}
} //-> a ginle-element enum type is the best way to implement a singleton


4. Enforce noninstantiability with a private constructor
- utility classes were not designed to be instantiated; 
- Attempting to enforce noninstantiability by making a class abstract does not work
  - the class can be subclassed and the subclass instantiated
  - mislead the user into thinking the class was designed for inheritance
- make the constructor private also prevents the class from being subclassed.
//Noinstantiable utility class
public class UtilityClass{
  //Suppress default constructor for noninstantiability
  private UtilityClass(){
    throw new AssertionError(); // privide insurance in the case the constructor is accidentally invoked from within the class
  }
  ... //Remainder omitted
}


5. Avoid creating unnecessary objects
- An object can always be reused if it is immutable
String s = new String("stringette"); //DON'T DO THIS!
 - create new String instance each time invoked
 - if this occurs in a loop or in a frequently invoked method, millions of String instances can be created needlessly;
String s = "stringette"; //improved version
 - this version uses a single String instance
 - you can often avoid creating unnecessary objects by using static factory methods (like Boolean.valueOf(String))

//Hideously slow program! Can you spot the object creation?
public static void main(String[] args){
  Long sum = 0L; //should declared as a long instead of Long
  for(long i = 0; i < Integer.MAX_VALUE; i++){
    sum += i; //each time would create a Long instance
  }
  System.out.println(sum);
}
-> prefer primitives to boxed primitives, and watch out for unintentional autoboxing.




